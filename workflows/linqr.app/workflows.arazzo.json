{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/linqr.app/main/2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "generate-custom-qr-code-with-hosted-logo",
      "summary": "This workflow allows a user to upload a custom image (e.g., a company logo) to LinQR's storage and then use the generated image ID to embed that logo into a single QR code. This is the preferred method for embedding images due to caching and performance benefits, especially for repeated use of the same logo.",
      "description": "This workflow allows a user to upload a custom image (e.g., a company logo) to LinQR's storage and then use the generated image ID to embed that logo into a single QR code. This is the preferred method for embedding images due to caching and performance benefits, especially for repeated use of the same logo.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-logo",
          "description": "Uploads a binary image file to LinQR's storage. The response includes metadata about the uploaded image, including its unique ID.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-text-qr-with-hosted-logo",
          "description": "Generates a text-based QR code, embedding the previously uploaded logo by referencing its storage ID. This operation returns the QR code image.",
          "operationId": "qrcode_text_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "image.uri": "$steps.upload-logo.outputs.id",
              "data": "$inputs.data"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_image": "$response.body#/qr_code_image"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-logo.outputs.id",
        "source": "$steps.upload-logo.outputs.source",
        "size": "$steps.upload-logo.outputs.size",
        "created": "$steps.upload-logo.outputs.created",
        "qr_code_image": "$steps.generate-text-qr-with-hosted-logo.outputs.qr_code_image"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-batch-qr-codes-with-hosted-logos",
      "summary": "This workflow enables the efficient generation of multiple QR codes in a single request. It leverages pre-uploaded images for embedding, which is ideal for bulk generation of branded QR codes, as it benefits from LinQR's caching mechanisms.",
      "description": "This workflow enables the efficient generation of multiple QR codes in a single request. It leverages pre-uploaded images for embedding, which is ideal for bulk generation of branded QR codes, as it benefits from LinQR's caching mechanisms.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-logo",
          "description": "Uploads a binary image file to LinQR's storage. The response includes metadata about the uploaded image, including its unique ID.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-code-batch",
          "description": "Generates a single archive (ZIP or TGZ) containing multiple QR codes. Each QR code within the batch can be configured with specific data and can embed the previously uploaded logo by referencing its storage ID.",
          "operationId": "qrCodeBatch_batch_qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "items": "$steps.upload-logo.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_archive": "$response.body#/qr_code_archive"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-logo.outputs.id",
        "source": "$steps.upload-logo.outputs.source",
        "size": "$steps.upload-logo.outputs.size",
        "created": "$steps.upload-logo.outputs.created",
        "qr_code_archive": "$steps.generate-qr-code-batch.outputs.qr_code_archive"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-hosted-images",
      "summary": "This workflow provides a way for users to list all images they have uploaded to LinQR's storage and then delete specific ones to manage their hosted assets. This is useful for keeping storage organized and removing outdated or unused images.",
      "description": "This workflow provides a way for users to list all images they have uploaded to LinQR's storage and then delete specific ones to manage their hosted assets. This is useful for keeping storage organized and removing outdated or unused images.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-all-hosted-images",
          "description": "Retrieves metadata for all images currently hosted in LinQR storage. This allows the user to see what images are available and their unique IDs.",
          "operationId": "imageListAll_images_get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_metadata_list": "$response.body#/0/image_metadata_list"
          }
        },
        {
          "stepId": "delete-specific-hosted-image",
          "description": "Deletes a specific image from LinQR storage using its unique identifier. This helps in managing storage space and removing unwanted assets.",
          "operationId": "imageDelete_images__id__delete",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deletion_status": "$response.body#/deletion_status"
          }
        }
      ],
      "outputs": {
        "image_metadata_list": "$steps.list-all-hosted-images.outputs.image_metadata_list",
        "deletion_status": "$steps.delete-specific-hosted-image.outputs.deletion_status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
