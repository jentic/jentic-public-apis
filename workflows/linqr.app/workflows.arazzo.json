{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/linqr.app/main/2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "batch-generate-qr-codes-with-pre-uploaded-logos",
      "summary": "Enables efficient generation of multiple QR Codes in a single request, each embedding a logo that has been pre-uploaded to LinQR's storage. This is ideal for high-volume QR code campaigns, leveraging caching for optimal performance.",
      "description": "Enables efficient generation of multiple QR Codes in a single request, each embedding a logo that has been pre-uploaded to LinQR's storage. This is ideal for high-volume QR code campaigns, leveraging caching for optimal performance.",
      "inputs": {
        "type": "object",
        "properties": {
          "upload-image-for-batch_body": {
            "type": "object"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-image-for-batch",
          "description": "Uploads a binary image file to LinQR's storage for later use in batch QR code generation. The unique identifier (ID) of the uploaded image is returned.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": "$inputs.upload-image-for-batch_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-code-batch",
          "description": "Generates a single archive (zip or tgz) containing multiple QR Codes. Each QR Code in the batch can be configured with specific data and embed the pre-uploaded image by referencing its ID (e.g., `storage://{id}`).",
          "operationId": "qrCodeBatch_batch_qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "items": "$inputs.items"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_archive": "$response.body#/qr_code_archive"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-image-for-batch.outputs.id",
        "source": "$steps.upload-image-for-batch.outputs.source",
        "size": "$steps.upload-image-for-batch.outputs.size",
        "created": "$steps.upload-image-for-batch.outputs.created",
        "qr_code_archive": "$steps.generate-qr-code-batch.outputs.qr_code_archive"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-custom-qr-code-with-hosted-logo",
      "summary": "Allows users to upload a custom image (e.g., a company logo) to LinQR's storage and then use that hosted image when generating a single QR Code of any type. This is efficient for repeated use of the same logo, as the image is cached on LinQR's infrastructure.",
      "description": "Allows users to upload a custom image (e.g., a company logo) to LinQR's storage and then use that hosted image when generating a single QR Code of any type. This is efficient for repeated use of the same logo, as the image is cached on LinQR's infrastructure.",
      "inputs": {
        "type": "object",
        "properties": {
          "upload-image_body": {
            "type": "object"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-image",
          "description": "Uploads a binary image file to LinQR's storage. The response includes metadata about the uploaded image, including its unique identifier (ID).",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": "$inputs.upload-image_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-code-with-hosted-image",
          "description": "Generates a QR Code with auto-detected data type and embeds the previously uploaded image. The image ID from the previous step is used to construct the `image.uri` (e.g., `storage://{id}`).",
          "operationId": "qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "data": "$inputs.data"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_image": "$response.body#/qr_code_image"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-image.outputs.id",
        "source": "$steps.upload-image.outputs.source",
        "size": "$steps.upload-image.outputs.size",
        "created": "$steps.upload-image.outputs.created",
        "qr_code_image": "$steps.generate-qr-code-with-hosted-image.outputs.qr_code_image"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-hosted-images-lifecycle",
      "summary": "Provides a complete process for users to view, retrieve detailed information about, and delete images stored within the LinQR API infrastructure. This is crucial for maintaining and organizing image assets used in QR codes.",
      "description": "Provides a complete process for users to view, retrieve detailed information about, and delete images stored within the LinQR API infrastructure. This is crucial for maintaining and organizing image assets used in QR codes.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-all-images",
          "description": "Retrieves a list of metadata for all images currently hosted in LinQR storage. This allows users to see what images are available and their IDs.",
          "operationId": "imageListAll_images_get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_list": "$response.body#/0/image_list"
          }
        },
        {
          "stepId": "get-specific-image-metadata",
          "description": "Fetches detailed metadata for a specific hosted image using its unique identifier (ID). This step typically follows listing all images to select a particular one.",
          "operationId": "imageList_images__id__get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_metadata": "$response.body#/image_metadata"
          }
        },
        {
          "stepId": "delete-hosted-image",
          "description": "Deletes a specific image from LinQR storage using its unique identifier (ID). This is the final step in managing an image's lifecycle, removing it from the system.",
          "operationId": "imageDelete_images__id__delete",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "image_list": "$steps.list-all-images.outputs.image_list",
        "image_metadata": "$steps.get-specific-image-metadata.outputs.image_metadata",
        "image_data": "$steps.delete-hosted-image.outputs.image_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
