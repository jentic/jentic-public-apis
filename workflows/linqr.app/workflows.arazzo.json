{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/linqr.app/main/2.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "generate-custom-qr-with-hosted-logo",
      "summary": "This workflow allows users to generate a single QR code with a custom logo by first uploading their image to LinQR's storage for optimized performance, and then using the hosted image's ID in the QR code generation request. This is valuable for frequently used logos or performance-critical applications.",
      "description": "This workflow allows users to generate a single QR code with a custom logo by first uploading their image to LinQR's storage for optimized performance, and then using the hosted image's ID in the QR code generation request. This is valuable for frequently used logos or performance-critical applications.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-logo",
          "description": "Uploads a binary image file (e.g., a company logo) to LinQR's storage. The API returns metadata including a unique ID for the uploaded image.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-with-logo",
          "description": "Generates a text-based QR code, embedding the previously uploaded logo using its storage ID. This leverages LinQR's caching for faster response times.",
          "operationId": "qrcode_text_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "image.uri": "$steps.upload-logo.outputs.id",
              "data": "$inputs.data"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_image": "$response.body#/qr_code_image"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-logo.outputs.id",
        "source": "$steps.upload-logo.outputs.source",
        "size": "$steps.upload-logo.outputs.size",
        "created": "$steps.upload-logo.outputs.created",
        "qr_code_image": "$steps.generate-qr-with-logo.outputs.qr_code_image"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "generate-batch-qr-with-shared-logo",
      "summary": "This workflow enables efficient generation of multiple QR codes, all embedding the same pre-uploaded logo. It's ideal for campaigns requiring a large number of QR codes with consistent branding, leveraging LinQR's caching for speed and reducing individual API calls.",
      "description": "This workflow enables efficient generation of multiple QR codes, all embedding the same pre-uploaded logo. It's ideal for campaigns requiring a large number of QR codes with consistent branding, leveraging LinQR's caching for speed and reducing individual API calls.",
      "inputs": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-shared-logo",
          "description": "Uploads a binary image file to LinQR's storage. This image will be used as a shared logo across all QR codes in the batch.",
          "operationId": "imageUpload_images_post",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "image": "$inputs.image"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "generate-qr-batch",
          "description": "Generates a single archive (e.g., ZIP) containing multiple QR codes. Each QR code in the batch is configured with specific data and embeds the shared logo using its storage ID.",
          "operationId": "qrCodeBatch_batch_qrcode_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "items": "$inputs.items"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "qr_code_archive": "$response.body#/qr_code_archive"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-shared-logo.outputs.id",
        "source": "$steps.upload-shared-logo.outputs.source",
        "size": "$steps.upload-shared-logo.outputs.size",
        "created": "$steps.upload-shared-logo.outputs.created",
        "qr_code_archive": "$steps.generate-qr-batch.outputs.qr_code_archive"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-hosted-qr-code-logos",
      "summary": "This workflow provides a complete lifecycle for managing images stored on LinQR's infrastructure, from listing existing images to retrieving their metadata and eventually deleting them when no longer needed. This helps users keep their storage organized and manage costs.",
      "description": "This workflow provides a complete lifecycle for managing images stored on LinQR's infrastructure, from listing existing images to retrieving their metadata and eventually deleting them when no longer needed. This helps users keep their storage organized and manage costs.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-all-hosted-images",
          "description": "Retrieves a list of all images currently hosted in the LinQR storage, providing their metadata.",
          "operationId": "imageListAll_images_get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "image_metadata_list": "$response.body#/0/image_metadata_list"
          }
        },
        {
          "stepId": "get-specific-image-details",
          "description": "Fetches detailed metadata for a particular hosted image using its unique identifier.",
          "operationId": "imageList_images__id__get",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$inputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "source": "$response.body#/source",
            "size": "$response.body#/size",
            "created": "$response.body#/created"
          }
        },
        {
          "stepId": "delete-hosted-image",
          "description": "Removes a specific image from LinQR's storage using its unique identifier, cleaning up unused assets.",
          "operationId": "imageDelete_images__id__delete",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "value": "$steps.get-specific-image-details.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "deletion_success": "$response.body#/deletion_success"
          }
        }
      ],
      "outputs": {
        "image_metadata_list": "$steps.list-all-hosted-images.outputs.image_metadata_list",
        "id": "$steps.get-specific-image-details.outputs.id",
        "source": "$steps.get-specific-image-details.outputs.source",
        "size": "$steps.get-specific-image-details.outputs.size",
        "created": "$steps.get-specific-image-details.outputs.created",
        "deletion_success": "$steps.delete-hosted-image.outputs.deletion_success"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
