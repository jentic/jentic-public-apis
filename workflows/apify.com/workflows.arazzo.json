{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/apify.com/main/0.0.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "run-actor-asynchronously-and-retrieve-dataset-results",
      "summary": "Starts an Actor run asynchronously, periodically checks its status, and retrieves the results from its default dataset once finished.",
      "description": "Starts an Actor run asynchronously, periodically checks its status, and retrieves the results from its default dataset once finished.",
      "inputs": {
        "type": "object",
        "properties": {
          "actorId": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          },
          "maxItems": {
            "type": "string"
          },
          "maxTotalChargeUsd": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "waitForFinish": {
            "type": "string"
          },
          "webhooks": {
            "type": "string"
          },
          "start-actor-run_body": {
            "type": "object"
          },
          "runId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "clean": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "omit": {
            "type": "string"
          },
          "unwind": {
            "type": "string"
          },
          "flatten": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attachment": {
            "type": "string"
          },
          "delimiter": {
            "type": "string"
          },
          "bom": {
            "type": "string"
          },
          "xmlRoot": {
            "type": "string"
          },
          "xmlRow": {
            "type": "string"
          },
          "skipHeaderRow": {
            "type": "string"
          },
          "skipHidden": {
            "type": "string"
          },
          "skipEmpty": {
            "type": "string"
          },
          "simplified": {
            "type": "string"
          },
          "skipFailedPages": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "start-actor-run",
          "description": "Initiates an Actor run with specified parameters.",
          "operationId": "act_runs_post",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$inputs.actorId"
            },
            {
              "name": "timeout",
              "in": "query",
              "value": "$inputs.timeout"
            },
            {
              "name": "memory",
              "in": "query",
              "value": "$inputs.memory"
            },
            {
              "name": "maxItems",
              "in": "query",
              "value": "$inputs.maxItems"
            },
            {
              "name": "maxTotalChargeUsd",
              "in": "query",
              "value": "$inputs.maxTotalChargeUsd"
            },
            {
              "name": "build",
              "in": "query",
              "value": "$inputs.build"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            },
            {
              "name": "webhooks",
              "in": "query",
              "value": "$inputs.webhooks"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.start-actor-run_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "check-run-status",
          "description": "Retrieves the current status of the Actor run. This step would typically be polled until a terminal status (e.g., SUCCEEDED, FAILED) is reached.",
          "operationId": "actorRun_get",
          "parameters": [
            {
              "name": "runId",
              "in": "path",
              "value": "$steps.start-actor-run.outputs.id"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId"
          }
        },
        {
          "stepId": "get-dataset-items",
          "description": "Retrieves the items from the default dataset associated with the completed Actor run.",
          "operationId": "dataset_items_get",
          "parameters": [
            {
              "name": "datasetId",
              "in": "path",
              "value": "$steps.check-run-status.outputs.defaultDatasetId"
            },
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "clean",
              "in": "query",
              "value": "$inputs.clean"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "omit",
              "in": "query",
              "value": "$inputs.omit"
            },
            {
              "name": "unwind",
              "in": "query",
              "value": "$inputs.unwind"
            },
            {
              "name": "flatten",
              "in": "query",
              "value": "$inputs.flatten"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            },
            {
              "name": "attachment",
              "in": "query",
              "value": "$inputs.attachment"
            },
            {
              "name": "delimiter",
              "in": "query",
              "value": "$inputs.delimiter"
            },
            {
              "name": "bom",
              "in": "query",
              "value": "$inputs.bom"
            },
            {
              "name": "xmlRoot",
              "in": "query",
              "value": "$inputs.xmlRoot"
            },
            {
              "name": "xmlRow",
              "in": "query",
              "value": "$inputs.xmlRow"
            },
            {
              "name": "skipHeaderRow",
              "in": "query",
              "value": "$inputs.skipHeaderRow"
            },
            {
              "name": "skipHidden",
              "in": "query",
              "value": "$inputs.skipHidden"
            },
            {
              "name": "skipEmpty",
              "in": "query",
              "value": "$inputs.skipEmpty"
            },
            {
              "name": "simplified",
              "in": "query",
              "value": "$inputs.simplified"
            },
            {
              "name": "skipFailedPages",
              "in": "query",
              "value": "$inputs.skipFailedPages"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/0/items"
          }
        }
      ],
      "outputs": {
        "id": "$steps.check-run-status.outputs.id",
        "defaultDatasetId": "$steps.check-run-status.outputs.defaultDatasetId",
        "status": "$steps.check-run-status.outputs.status",
        "items": "$steps.get-dataset-items.outputs.items"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "run-actor-task-asynchronously-and-retrieve-dataset-results",
      "summary": "Starts an Actor Task run asynchronously, periodically checks its status, and retrieves the results from its default dataset once finished.",
      "description": "Starts an Actor Task run asynchronously, periodically checks its status, and retrieves the results from its default dataset once finished.",
      "inputs": {
        "type": "object",
        "properties": {
          "actorTaskId": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          },
          "maxItems": {
            "type": "string"
          },
          "maxTotalChargeUsd": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "waitForFinish": {
            "type": "string"
          },
          "webhooks": {
            "type": "string"
          },
          "start-task-run_body": {
            "type": "object"
          },
          "runId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "clean": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "omit": {
            "type": "string"
          },
          "unwind": {
            "type": "string"
          },
          "flatten": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attachment": {
            "type": "string"
          },
          "delimiter": {
            "type": "string"
          },
          "bom": {
            "type": "string"
          },
          "xmlRoot": {
            "type": "string"
          },
          "xmlRow": {
            "type": "string"
          },
          "skipHeaderRow": {
            "type": "string"
          },
          "skipHidden": {
            "type": "string"
          },
          "skipEmpty": {
            "type": "string"
          },
          "simplified": {
            "type": "string"
          },
          "skipFailedPages": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "start-task-run",
          "description": "Initiates an Actor Task run, potentially overriding default input.",
          "operationId": "actorTask_runs_post",
          "parameters": [
            {
              "name": "actorTaskId",
              "in": "path",
              "value": "$inputs.actorTaskId"
            },
            {
              "name": "timeout",
              "in": "query",
              "value": "$inputs.timeout"
            },
            {
              "name": "memory",
              "in": "query",
              "value": "$inputs.memory"
            },
            {
              "name": "maxItems",
              "in": "query",
              "value": "$inputs.maxItems"
            },
            {
              "name": "maxTotalChargeUsd",
              "in": "query",
              "value": "$inputs.maxTotalChargeUsd"
            },
            {
              "name": "build",
              "in": "query",
              "value": "$inputs.build"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            },
            {
              "name": "webhooks",
              "in": "query",
              "value": "$inputs.webhooks"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.start-task-run_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "check-task-run-status",
          "description": "Retrieves the current status of the Actor Task run. Poll until terminal status.",
          "operationId": "actorRun_get",
          "parameters": [
            {
              "name": "runId",
              "in": "path",
              "value": "$steps.start-task-run.outputs.id"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId"
          }
        },
        {
          "stepId": "get-task-dataset-items",
          "description": "Retrieves the items from the default dataset associated with the completed Actor Task run.",
          "operationId": "dataset_items_get",
          "parameters": [
            {
              "name": "datasetId",
              "in": "path",
              "value": "$steps.check-task-run-status.outputs.defaultDatasetId"
            },
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "clean",
              "in": "query",
              "value": "$inputs.clean"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "omit",
              "in": "query",
              "value": "$inputs.omit"
            },
            {
              "name": "unwind",
              "in": "query",
              "value": "$inputs.unwind"
            },
            {
              "name": "flatten",
              "in": "query",
              "value": "$inputs.flatten"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            },
            {
              "name": "attachment",
              "in": "query",
              "value": "$inputs.attachment"
            },
            {
              "name": "delimiter",
              "in": "query",
              "value": "$inputs.delimiter"
            },
            {
              "name": "bom",
              "in": "query",
              "value": "$inputs.bom"
            },
            {
              "name": "xmlRoot",
              "in": "query",
              "value": "$inputs.xmlRoot"
            },
            {
              "name": "xmlRow",
              "in": "query",
              "value": "$inputs.xmlRow"
            },
            {
              "name": "skipHeaderRow",
              "in": "query",
              "value": "$inputs.skipHeaderRow"
            },
            {
              "name": "skipHidden",
              "in": "query",
              "value": "$inputs.skipHidden"
            },
            {
              "name": "skipEmpty",
              "in": "query",
              "value": "$inputs.skipEmpty"
            },
            {
              "name": "simplified",
              "in": "query",
              "value": "$inputs.simplified"
            },
            {
              "name": "skipFailedPages",
              "in": "query",
              "value": "$inputs.skipFailedPages"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/0/items"
          }
        }
      ],
      "outputs": {
        "id": "$steps.check-task-run-status.outputs.id",
        "defaultDatasetId": "$steps.check-task-run-status.outputs.defaultDatasetId",
        "status": "$steps.check-task-run-status.outputs.status",
        "items": "$steps.get-task-dataset-items.outputs.items"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "develop-and-deploy-new-actor-version",
      "summary": "Creates a new Actor, adds a new version with source code, builds the version, and checks the build status.",
      "description": "Creates a new Actor, adds a new version with source code, builds the version, and checks the build status.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "isPublic": {
            "type": "string"
          },
          "versions": {
            "type": "string"
          },
          "defaultRunOptions": {
            "type": "string"
          },
          "actorId": {
            "type": "string"
          },
          "versionNumber": {
            "type": "string"
          },
          "sourceType": {
            "type": "string"
          },
          "buildTag": {
            "type": "string"
          },
          "sourceFiles": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "useCache": {
            "type": "string"
          },
          "betaPackages": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "waitForFinish": {
            "type": "string"
          },
          "buildId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-actor",
          "description": "Creates a new Actor definition.",
          "operationId": "acts_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "description": "$inputs.description",
              "title": "$inputs.title",
              "isPublic": "$inputs.isPublic",
              "versions": "$inputs.versions",
              "defaultRunOptions": "$inputs.defaultRunOptions"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "name": "$response.body#/name"
          }
        },
        {
          "stepId": "create-actor-version",
          "description": "Creates a new version for the Actor, specifying source code (e.g., from Git or source files).",
          "operationId": "act_versions_post",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$steps.create-actor.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "actorId": "$steps.create-actor.outputs.id",
              "versionNumber": "$inputs.versionNumber",
              "sourceType": "$inputs.sourceType",
              "buildTag": "$inputs.buildTag",
              "sourceFiles": "$inputs.sourceFiles"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "versionNumber": "$response.body#/versionNumber"
          }
        },
        {
          "stepId": "build-actor-version",
          "description": "Starts a build process for the specified Actor version.",
          "operationId": "act_builds_post",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$steps.create-actor.outputs.id"
            },
            {
              "name": "version",
              "in": "query",
              "value": "$steps.create-actor-version.outputs.versionNumber"
            },
            {
              "name": "useCache",
              "in": "query",
              "value": "$inputs.useCache"
            },
            {
              "name": "betaPackages",
              "in": "query",
              "value": "$inputs.betaPackages"
            },
            {
              "name": "tag",
              "in": "query",
              "value": "$inputs.tag"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "check-build-status",
          "description": "Retrieves the status of the build. Poll until terminal status.",
          "operationId": "actorBuild_get",
          "parameters": [
            {
              "name": "buildId",
              "in": "path",
              "value": "$steps.build-actor-version.outputs.id"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "buildNumber": "$response.body#/buildNumber"
          }
        }
      ],
      "outputs": {
        "id": "$steps.build-actor-version.outputs.id",
        "name": "$steps.create-actor.outputs.name",
        "versionNumber": "$steps.create-actor-version.outputs.versionNumber",
        "status": "$steps.check-build-status.outputs.status",
        "buildNumber": "$steps.check-build-status.outputs.buildNumber"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "populate-request-queue-and-run-actor",
      "summary": "Creates a request queue, adds URLs/requests to it, runs an Actor configured to process this queue, and retrieves the results.",
      "description": "Creates a request queue, adds URLs/requests to it, runs an Actor configured to process this queue, and retrieves the results.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "queueId": {
            "type": "string"
          },
          "clientKey": {
            "type": "string"
          },
          "forefront": {
            "type": "string"
          },
          "actorId": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          },
          "maxItems": {
            "type": "string"
          },
          "maxTotalChargeUsd": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "waitForFinish": {
            "type": "string"
          },
          "webhooks": {
            "type": "string"
          },
          "run-actor-with-queue_body": {
            "type": "object"
          },
          "runId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "clean": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "omit": {
            "type": "string"
          },
          "unwind": {
            "type": "string"
          },
          "flatten": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attachment": {
            "type": "string"
          },
          "delimiter": {
            "type": "string"
          },
          "bom": {
            "type": "string"
          },
          "xmlRoot": {
            "type": "string"
          },
          "xmlRow": {
            "type": "string"
          },
          "skipHeaderRow": {
            "type": "string"
          },
          "skipHidden": {
            "type": "string"
          },
          "skipEmpty": {
            "type": "string"
          },
          "simplified": {
            "type": "string"
          },
          "skipFailedPages": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-request-queue",
          "description": "Creates a new, potentially named, request queue.",
          "operationId": "requestQueues_post",
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "value": "$inputs.name"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-request-to-queue",
          "description": "Adds a single request (URL) to the queue.",
          "operationId": "requestQueue_requests_post",
          "parameters": [
            {
              "name": "queueId",
              "in": "path",
              "value": "$steps.create-request-queue.outputs.id"
            },
            {
              "name": "clientKey",
              "in": "query",
              "value": "$inputs.clientKey"
            },
            {
              "name": "forefront",
              "in": "query",
              "value": "$inputs.forefront"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "queueId": "$steps.create-request-queue.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "requestId": "$response.body#/requestId",
            "wasAlreadyPresent": "$response.body#/wasAlreadyPresent"
          }
        },
        {
          "stepId": "run-actor-with-queue",
          "description": "Runs an Actor, passing the request queue ID in its input.",
          "operationId": "act_runs_post",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$inputs.actorId"
            },
            {
              "name": "timeout",
              "in": "query",
              "value": "$inputs.timeout"
            },
            {
              "name": "memory",
              "in": "query",
              "value": "$inputs.memory"
            },
            {
              "name": "maxItems",
              "in": "query",
              "value": "$inputs.maxItems"
            },
            {
              "name": "maxTotalChargeUsd",
              "in": "query",
              "value": "$inputs.maxTotalChargeUsd"
            },
            {
              "name": "build",
              "in": "query",
              "value": "$inputs.build"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            },
            {
              "name": "webhooks",
              "in": "query",
              "value": "$inputs.webhooks"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$steps.create-request-queue.outputs.id"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "check-queue-run-status",
          "description": "Checks the status of the Actor run processing the queue. Poll until terminal.",
          "operationId": "actorRun_get",
          "parameters": [
            {
              "name": "runId",
              "in": "path",
              "value": "$steps.run-actor-with-queue.outputs.id"
            },
            {
              "name": "waitForFinish",
              "in": "query",
              "value": "$inputs.waitForFinish"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "defaultDatasetId": "$response.body#/defaultDatasetId"
          }
        },
        {
          "stepId": "get-queue-run-results",
          "description": "Retrieves results stored by the Actor run.",
          "operationId": "dataset_items_get",
          "parameters": [
            {
              "name": "datasetId",
              "in": "path",
              "value": "$steps.check-queue-run-status.outputs.defaultDatasetId"
            },
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "clean",
              "in": "query",
              "value": "$inputs.clean"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "omit",
              "in": "query",
              "value": "$inputs.omit"
            },
            {
              "name": "unwind",
              "in": "query",
              "value": "$inputs.unwind"
            },
            {
              "name": "flatten",
              "in": "query",
              "value": "$inputs.flatten"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            },
            {
              "name": "attachment",
              "in": "query",
              "value": "$inputs.attachment"
            },
            {
              "name": "delimiter",
              "in": "query",
              "value": "$inputs.delimiter"
            },
            {
              "name": "bom",
              "in": "query",
              "value": "$inputs.bom"
            },
            {
              "name": "xmlRoot",
              "in": "query",
              "value": "$inputs.xmlRoot"
            },
            {
              "name": "xmlRow",
              "in": "query",
              "value": "$inputs.xmlRow"
            },
            {
              "name": "skipHeaderRow",
              "in": "query",
              "value": "$inputs.skipHeaderRow"
            },
            {
              "name": "skipHidden",
              "in": "query",
              "value": "$inputs.skipHidden"
            },
            {
              "name": "skipEmpty",
              "in": "query",
              "value": "$inputs.skipEmpty"
            },
            {
              "name": "simplified",
              "in": "query",
              "value": "$inputs.simplified"
            },
            {
              "name": "skipFailedPages",
              "in": "query",
              "value": "$inputs.skipFailedPages"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/0/items"
          }
        }
      ],
      "outputs": {
        "id": "$steps.run-actor-with-queue.outputs.id",
        "requestId": "$steps.add-request-to-queue.outputs.requestId",
        "wasAlreadyPresent": "$steps.add-request-to-queue.outputs.wasAlreadyPresent",
        "defaultDatasetId": "$steps.check-queue-run-status.outputs.defaultDatasetId",
        "status": "$steps.check-queue-run-status.outputs.status",
        "items": "$steps.get-queue-run-results.outputs.items"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "schedule-an-actor-task",
      "summary": "Creates a schedule that periodically runs a specified Actor Task.",
      "description": "Creates a schedule that periodically runs a specified Actor Task.",
      "inputs": {
        "type": "object",
        "properties": {
          "actorTaskId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isEnabled": {
            "type": "string"
          },
          "cronExpression": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "actions": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-task-details",
          "description": "Retrieve details of the Actor Task to be scheduled.",
          "operationId": "actorTask_get",
          "parameters": [
            {
              "name": "actorTaskId",
              "in": "path",
              "value": "$inputs.actorTaskId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-schedule",
          "description": "Creates a new schedule with a CRON expression, timezone, and an action to run the Actor Task.",
          "operationId": "schedules_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "isEnabled": "$inputs.isEnabled",
              "cronExpression": "$inputs.cronExpression",
              "timezone": "$inputs.timezone",
              "actions": "$inputs.actions"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "nextRunAt": "$response.body#/nextRunAt"
          }
        }
      ],
      "outputs": {
        "id": "$steps.create-schedule.outputs.id",
        "nextRunAt": "$steps.create-schedule.outputs.nextRunAt"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "create-and-configure-actor-task",
      "summary": "Finds an existing Actor and creates a pre-configured Task for it with specific options and input.",
      "description": "Finds an existing Actor and creates a pre-configured Task for it with specific options and input.",
      "inputs": {
        "type": "object",
        "properties": {
          "my": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-my-actors",
          "description": "Lists Actors owned by the user to find the target Actor.",
          "operationId": "acts_get",
          "parameters": [
            {
              "name": "my",
              "in": "query",
              "value": "$inputs.my"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/items"
          }
        },
        {
          "stepId": "create-task",
          "description": "Creates a new Actor Task based on a selected Actor ID, providing a name, run options, and default input.",
          "operationId": "actorTasks_post",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "actId": "$steps.list-my-actors.outputs.items[0].id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "name": "$response.body#/name"
          }
        }
      ],
      "outputs": {
        "items": "$steps.list-my-actors.outputs.items",
        "id": "$steps.create-task.outputs.id",
        "name": "$steps.create-task.outputs.name"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "set-up-webhook-for-actor-run-completion-and-test",
      "summary": "Creates a webhook that triggers on Actor run success/failure events and then tests it.",
      "description": "Creates a webhook that triggers on Actor run success/failure events and then tests it.",
      "inputs": {
        "type": "object",
        "properties": {
          "actorId": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "eventTypes": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "requestUrl": {
            "type": "string"
          },
          "webhookId": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-actor-details",
          "description": "Retrieve details of the Actor for which the webhook will be set up.",
          "operationId": "act_get",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$inputs.actorId"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-webhook",
          "description": "Creates a new webhook configured to listen for specific Actor run events.",
          "operationId": "webhooks_post",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "eventTypes": "$inputs.eventTypes",
              "condition": "$inputs.condition",
              "requestUrl": "$inputs.requestUrl"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "test-webhook",
          "description": "Sends a test event to the created webhook's URL.",
          "operationId": "webhook_test_post",
          "parameters": [
            {
              "name": "webhookId",
              "in": "path",
              "value": "$steps.create-webhook.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status"
          }
        }
      ],
      "outputs": {
        "id": "$steps.test-webhook.outputs.id",
        "status": "$steps.test-webhook.outputs.status"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "retrieve-last-successful-actor-run-details-and-results",
      "summary": "Finds the last successfully completed run for a specific Actor and retrieves its details and dataset items.",
      "description": "Finds the last successfully completed run for a specific Actor and retrieves its details and dataset items.",
      "inputs": {
        "type": "object",
        "properties": {
          "actorId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "clean": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "omit": {
            "type": "string"
          },
          "unwind": {
            "type": "string"
          },
          "flatten": {
            "type": "string"
          },
          "desc": {
            "type": "string"
          },
          "attachment": {
            "type": "string"
          },
          "delimiter": {
            "type": "string"
          },
          "bom": {
            "type": "string"
          },
          "xmlRoot": {
            "type": "string"
          },
          "xmlRow": {
            "type": "string"
          },
          "skipHeaderRow": {
            "type": "string"
          },
          "skipHidden": {
            "type": "string"
          },
          "skipEmpty": {
            "type": "string"
          },
          "simplified": {
            "type": "string"
          },
          "skipFailedPages": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-last-successful-run",
          "description": "Retrieves the details of the last run of the specified Actor, filtering by status 'SUCCEEDED'.",
          "operationId": "act_runs_last_get",
          "parameters": [
            {
              "name": "actorId",
              "in": "path",
              "value": "$inputs.actorId"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "defaultDatasetId": "$response.body#/defaultDatasetId"
          }
        },
        {
          "stepId": "get-last-run-dataset-items",
          "description": "Retrieves items from the default dataset of the last successful run.",
          "operationId": "dataset_items_get",
          "parameters": [
            {
              "name": "datasetId",
              "in": "path",
              "value": "$steps.get-last-successful-run.outputs.defaultDatasetId"
            },
            {
              "name": "format",
              "in": "query",
              "value": "$inputs.format"
            },
            {
              "name": "clean",
              "in": "query",
              "value": "$inputs.clean"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "omit",
              "in": "query",
              "value": "$inputs.omit"
            },
            {
              "name": "unwind",
              "in": "query",
              "value": "$inputs.unwind"
            },
            {
              "name": "flatten",
              "in": "query",
              "value": "$inputs.flatten"
            },
            {
              "name": "desc",
              "in": "query",
              "value": "$inputs.desc"
            },
            {
              "name": "attachment",
              "in": "query",
              "value": "$inputs.attachment"
            },
            {
              "name": "delimiter",
              "in": "query",
              "value": "$inputs.delimiter"
            },
            {
              "name": "bom",
              "in": "query",
              "value": "$inputs.bom"
            },
            {
              "name": "xmlRoot",
              "in": "query",
              "value": "$inputs.xmlRoot"
            },
            {
              "name": "xmlRow",
              "in": "query",
              "value": "$inputs.xmlRow"
            },
            {
              "name": "skipHeaderRow",
              "in": "query",
              "value": "$inputs.skipHeaderRow"
            },
            {
              "name": "skipHidden",
              "in": "query",
              "value": "$inputs.skipHidden"
            },
            {
              "name": "skipEmpty",
              "in": "query",
              "value": "$inputs.skipEmpty"
            },
            {
              "name": "simplified",
              "in": "query",
              "value": "$inputs.simplified"
            },
            {
              "name": "skipFailedPages",
              "in": "query",
              "value": "$inputs.skipFailedPages"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "items": "$response.body#/0/items"
          }
        }
      ],
      "outputs": {
        "id": "$steps.get-last-successful-run.outputs.id",
        "defaultDatasetId": "$steps.get-last-successful-run.outputs.defaultDatasetId",
        "items": "$steps.get-last-run-dataset-items.outputs.items"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "check-account-usage-and-limits",
      "summary": "Retrieves the current account limits and the usage for the current or a specified monthly cycle.",
      "description": "Retrieves the current account limits and the usage for the current or a specified monthly cycle.",
      "inputs": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-user-limits",
          "description": "Fetches the configured limits for the authenticated user's account.",
          "operationId": "users_me_limits_get",
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "limits": "$response.body#/limits",
            "current": "$response.body#/current"
          }
        },
        {
          "stepId": "get-monthly-usage",
          "description": "Fetches the detailed usage breakdown for the current monthly billing cycle.",
          "operationId": "users_me_usage_monthly_get",
          "parameters": [
            {
              "name": "date",
              "in": "query",
              "value": "$inputs.date"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "usageCycle": "$response.body#/usageCycle",
            "monthlyServiceUsage": "$response.body#/monthlyServiceUsage",
            "dailyServiceUsages": "$response.body#/dailyServiceUsages"
          }
        }
      ],
      "outputs": {
        "limits": "$steps.get-user-limits.outputs.limits",
        "current": "$steps.get-user-limits.outputs.current",
        "usageCycle": "$steps.get-monthly-usage.outputs.usageCycle",
        "monthlyServiceUsage": "$steps.get-monthly-usage.outputs.monthlyServiceUsage",
        "dailyServiceUsages": "$steps.get-monthly-usage.outputs.dailyServiceUsages"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-key-value-store-record",
      "summary": "Stores a record in a Key-Value store, retrieves it, and then deletes it.",
      "description": "Stores a record in a Key-Value store, retrieves it, and then deletes it.",
      "inputs": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string"
          },
          "recordKey": {
            "type": "string"
          },
          "Content-Encoding": {
            "type": "string"
          },
          "put-record_body": {
            "type": "object"
          }
        }
      },
      "steps": [
        {
          "stepId": "put-record",
          "description": "Stores a value (record) under a specific key in the store.",
          "operationId": "keyValueStore_record_put",
          "parameters": [
            {
              "name": "storeId",
              "in": "path",
              "value": "$inputs.storeId"
            },
            {
              "name": "recordKey",
              "in": "path",
              "value": "$inputs.recordKey"
            },
            {
              "name": "Content-Encoding",
              "in": "header",
              "value": "$inputs.Content-Encoding"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": "$inputs.put-record_body"
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "record_data": "$response.body"
          }
        },
        {
          "stepId": "get-record",
          "description": "Retrieves the value of the stored record.",
          "operationId": "keyValueStore_record_get",
          "parameters": [
            {
              "name": "storeId",
              "in": "path",
              "value": "$inputs.storeId"
            },
            {
              "name": "recordKey",
              "in": "path",
              "value": "$inputs.recordKey"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "recordValue": "$response.body#/recordValue"
          }
        },
        {
          "stepId": "delete-record",
          "description": "Deletes the record from the store.",
          "operationId": "keyValueStore_record_delete",
          "parameters": [
            {
              "name": "storeId",
              "in": "path",
              "value": "$inputs.storeId"
            },
            {
              "name": "recordKey",
              "in": "path",
              "value": "$inputs.recordKey"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "record_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "record_data": "$steps.delete-record.outputs.record_data",
        "recordValue": "$steps.get-record.outputs.recordValue"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
