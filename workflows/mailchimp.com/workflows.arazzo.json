{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/mailchimp.com/main/3.0.55/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "create-and-launch-standard-email-campaign",
      "summary": "Guides a user through the essential steps of creating a new email campaign, setting its content, sending a test, checking readiness, and finally scheduling or sending it to an audience.",
      "description": "Guides a user through the essential steps of creating a new email campaign, setting its content, sending a test, checking readiness, and finally scheduling or sending it to an audience.",
      "inputs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          },
          "html": {
            "type": "string"
          },
          "plain_text": {
            "type": "string"
          },
          "test_emails": {
            "type": "string"
          },
          "send_type": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "schedule_time": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "create-campaign",
          "description": "Creates a new Mailchimp campaign with basic settings.",
          "operationId": "postCampaigns",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "type": "$inputs.type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "campaign_id": "$response.body#/variate_settings/combinations/0/id"
          }
        },
        {
          "stepId": "set-campaign-content",
          "description": "Sets the HTML and/or plain-text content for the campaign.",
          "operationId": "putCampaignsIdContent",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.create-campaign.outputs.campaign_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "campaign_id": "$steps.create-campaign.outputs.campaign_id",
              "html": "$inputs.html",
              "plain_text": "$inputs.plain_text"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "content_data": "$response.body"
          }
        },
        {
          "stepId": "send-test-email",
          "description": "Sends a test version of the campaign to specified email addresses for review.",
          "operationId": "postCampaignsIdActionsTest",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.create-campaign.outputs.campaign_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "campaign_id": "$steps.create-campaign.outputs.campaign_id",
              "test_emails": "$inputs.test_emails",
              "send_type": "$inputs.send_type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "email_data": "$response.body"
          }
        },
        {
          "stepId": "check-send-checklist",
          "description": "Reviews the send checklist for a campaign to identify any issues before sending.",
          "operationId": "getCampaignsIdSendChecklist",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.create-campaign.outputs.campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "is_ready": "$response.body#/is_ready",
            "items": "$response.body#/items"
          }
        },
        {
          "stepId": "schedule-or-send-campaign",
          "description": "Schedules the campaign for a future delivery or sends it immediately.",
          "operationId": "postCampaignsIdActionsSchedule",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.create-campaign.outputs.campaign_id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "campaign_id": "$steps.create-campaign.outputs.campaign_id",
              "schedule_time": "$inputs.schedule_time"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "campaign_data": "$response.body"
          }
        },
        {
          "stepId": "schedule-or-send-campaign",
          "description": "Schedules the campaign for a future delivery or sends it immediately.",
          "operationId": "postCampaignsIdActionsSend",
          "parameters": [
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.create-campaign.outputs.campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "campaign_data": "$response.body"
          }
        }
      ],
      "outputs": {
        "campaign_id": "$steps.create-campaign.outputs.campaign_id",
        "content_data": "$steps.set-campaign-content.outputs.content_data",
        "email_data": "$steps.send-test-email.outputs.email_data",
        "is_ready": "$steps.check-send-checklist.outputs.is_ready",
        "items": "$steps.check-send-checklist.outputs.items",
        "campaign_data": "$steps.schedule-or-send-campaign.outputs.campaign_data"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "subscriber-management-and-tagging",
      "summary": "Manages individual and batch subscriber operations, including adding, updating, and tagging members within a specific audience.",
      "description": "Manages individual and batch subscriber operations, including adding, updating, and tagging members within a specific audience.",
      "inputs": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "count": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "before_date_created": {
            "type": "string"
          },
          "since_date_created": {
            "type": "string"
          },
          "before_campaign_last_sent": {
            "type": "string"
          },
          "since_campaign_last_sent": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "sort_field": {
            "type": "string"
          },
          "sort_dir": {
            "type": "string"
          },
          "has_ecommerce_store": {
            "type": "string"
          },
          "include_total_contacts": {
            "type": "string"
          },
          "list_id": {
            "type": "string"
          },
          "subscriber_hash": {
            "type": "string"
          },
          "skip_merge_validation": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "status_if_new": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "skip_duplicate_check": {
            "type": "string"
          },
          "members": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-audience-id",
          "description": "Retrieves the ID of an existing audience (list) by name or other criteria.",
          "operationId": "getLists",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "count",
              "in": "query",
              "value": "$inputs.count"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "before_date_created",
              "in": "query",
              "value": "$inputs.before_date_created"
            },
            {
              "name": "since_date_created",
              "in": "query",
              "value": "$inputs.since_date_created"
            },
            {
              "name": "before_campaign_last_sent",
              "in": "query",
              "value": "$inputs.before_campaign_last_sent"
            },
            {
              "name": "since_campaign_last_sent",
              "in": "query",
              "value": "$inputs.since_campaign_last_sent"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$inputs.email"
            },
            {
              "name": "sort_field",
              "in": "query",
              "value": "$inputs.sort_field"
            },
            {
              "name": "sort_dir",
              "in": "query",
              "value": "$inputs.sort_dir"
            },
            {
              "name": "has_ecommerce_store",
              "in": "query",
              "value": "$inputs.has_ecommerce_store"
            },
            {
              "name": "include_total_contacts",
              "in": "query",
              "value": "$inputs.include_total_contacts"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "list_id": "$response.body#/lists/0/id"
          }
        },
        {
          "stepId": "add-or-update-subscriber",
          "description": "Adds a new member or updates an existing member's information in an audience.",
          "operationId": "putListsIdMembersId",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-audience-id.outputs.list_id"
            },
            {
              "name": "subscriber_hash",
              "in": "path",
              "value": "$inputs.subscriber_hash"
            },
            {
              "name": "skip_merge_validation",
              "in": "query",
              "value": "$inputs.skip_merge_validation"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "list_id": "$steps.get-audience-id.outputs.list_id",
              "email_address": "$inputs.email_address",
              "status_if_new": "$inputs.status_if_new"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "email_address": "$response.body#/email_address"
          }
        },
        {
          "stepId": "add-or-remove-subscriber-tags",
          "description": "Adds or removes tags for a specific subscriber to manage segmentation.",
          "operationId": "postListMemberTags",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-audience-id.outputs.list_id"
            },
            {
              "name": "subscriber_hash",
              "in": "path",
              "value": "$steps.add-or-update-subscriber.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "list_id": "$steps.get-audience-id.outputs.list_id",
              "subscriber_hash": "$steps.add-or-update-subscriber.outputs.id",
              "tags": "$inputs.tags"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "tags_data": "$response.body"
          }
        },
        {
          "stepId": "batch-update-subscribers",
          "description": "Performs bulk subscribe or unsubscribe operations for multiple members in an audience.",
          "operationId": "postListsId",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-audience-id.outputs.list_id"
            },
            {
              "name": "skip_merge_validation",
              "in": "query",
              "value": "$inputs.skip_merge_validation"
            },
            {
              "name": "skip_duplicate_check",
              "in": "query",
              "value": "$inputs.skip_duplicate_check"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "list_id": "$steps.get-audience-id.outputs.list_id",
              "members": "$inputs.members"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "total_created": "$response.body#/total_created",
            "total_updated": "$response.body#/total_updated",
            "error_count": "$response.body#/error_count"
          }
        }
      ],
      "outputs": {
        "list_id": "$steps.get-audience-id.outputs.list_id",
        "id": "$steps.add-or-update-subscriber.outputs.id",
        "email_address": "$steps.add-or-update-subscriber.outputs.email_address",
        "tags_data": "$steps.add-or-remove-subscriber-tags.outputs.tags_data",
        "total_created": "$steps.batch-update-subscribers.outputs.total_created",
        "total_updated": "$steps.batch-update-subscribers.outputs.total_updated",
        "error_count": "$steps.batch-update-subscribers.outputs.error_count"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "e-commerce-store-and-order-processing",
      "summary": "Integrates and manages an e-commerce store within Mailchimp, including adding products, customers, and processing orders to leverage Mailchimp's marketing automation features.",
      "description": "Integrates and manages an e-commerce store within Mailchimp, including adding products, customers, and processing orders to leverage Mailchimp's marketing automation features.",
      "inputs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "list_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "store_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "variants": {
            "type": "string"
          },
          "opt_in_status": {
            "type": "string"
          },
          "customer": {
            "type": "string"
          },
          "order_total": {
            "type": "string"
          },
          "lines": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "add-ecommerce-store",
          "description": "Registers a new e-commerce store with Mailchimp.",
          "operationId": "postEcommerceStores",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "id": "$inputs.id",
              "list_id": "$inputs.list_id",
              "name": "$inputs.name",
              "currency_code": "$inputs.currency_code"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-product-to-store",
          "description": "Adds a new product to the registered e-commerce store.",
          "operationId": "postEcommerceStoresIdProducts",
          "parameters": [
            {
              "name": "store_id",
              "in": "path",
              "value": "$steps.add-ecommerce-store.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "store_id": "$steps.add-ecommerce-store.outputs.id",
              "id": "$inputs.id",
              "title": "$inputs.title",
              "variants": "$inputs.variants"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/variants/0/id"
          }
        },
        {
          "stepId": "add-customer-to-store",
          "description": "Adds a new customer to the e-commerce store, linking them to Mailchimp's audience.",
          "operationId": "postEcommerceStoresIdCustomers",
          "parameters": [
            {
              "name": "store_id",
              "in": "path",
              "value": "$steps.add-ecommerce-store.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "store_id": "$steps.add-ecommerce-store.outputs.id",
              "id": "$inputs.id",
              "opt_in_status": "$inputs.opt_in_status"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-new-order",
          "description": "Records a new order placed by a customer in the e-commerce store.",
          "operationId": "postEcommerceStoresIdOrders",
          "parameters": [
            {
              "name": "store_id",
              "in": "path",
              "value": "$steps.add-ecommerce-store.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "store_id": "$steps.add-ecommerce-store.outputs.id",
              "id": "$inputs.id",
              "customer": "$inputs.customer",
              "currency_code": "$inputs.currency_code",
              "order_total": "$inputs.order_total",
              "lines": "$inputs.lines"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/outreach/id"
          }
        }
      ],
      "outputs": {
        "id": "$steps.add-new-order.outputs.id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "analyze-campaign-performance-reports",
      "summary": "Retrieves and analyzes various reports for a sent campaign, including overall statistics, click details, and open details by location, to evaluate campaign effectiveness.",
      "description": "Retrieves and analyzes various reports for a sent campaign, including overall statistics, click details, and open details by location, to evaluate campaign effectiveness.",
      "inputs": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "count": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "before_send_time": {
            "type": "string"
          },
          "since_send_time": {
            "type": "string"
          },
          "before_create_time": {
            "type": "string"
          },
          "since_create_time": {
            "type": "string"
          },
          "list_id": {
            "type": "string"
          },
          "folder_id": {
            "type": "string"
          },
          "member_id": {
            "type": "string"
          },
          "sort_field": {
            "type": "string"
          },
          "sort_dir": {
            "type": "string"
          },
          "include_resend_shortcut_eligibility": {
            "type": "string"
          },
          "campaign_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "list-sent-campaigns",
          "description": "Lists all campaigns, allowing filtering by status to find sent campaigns.",
          "operationId": "getCampaigns",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "count",
              "in": "query",
              "value": "$inputs.count"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "type",
              "in": "query",
              "value": "$inputs.type"
            },
            {
              "name": "status",
              "in": "query",
              "value": "$inputs.status"
            },
            {
              "name": "before_send_time",
              "in": "query",
              "value": "$inputs.before_send_time"
            },
            {
              "name": "since_send_time",
              "in": "query",
              "value": "$inputs.since_send_time"
            },
            {
              "name": "before_create_time",
              "in": "query",
              "value": "$inputs.before_create_time"
            },
            {
              "name": "since_create_time",
              "in": "query",
              "value": "$inputs.since_create_time"
            },
            {
              "name": "list_id",
              "in": "query",
              "value": "$inputs.list_id"
            },
            {
              "name": "folder_id",
              "in": "query",
              "value": "$inputs.folder_id"
            },
            {
              "name": "member_id",
              "in": "query",
              "value": "$inputs.member_id"
            },
            {
              "name": "sort_field",
              "in": "query",
              "value": "$inputs.sort_field"
            },
            {
              "name": "sort_dir",
              "in": "query",
              "value": "$inputs.sort_dir"
            },
            {
              "name": "include_resend_shortcut_eligibility",
              "in": "query",
              "value": "$inputs.include_resend_shortcut_eligibility"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "campaign_id": "$response.body#/campaigns/0/variate_settings/combinations/0/id"
          }
        },
        {
          "stepId": "get-campaign-report-details",
          "description": "Gets detailed statistics and performance metrics for a specific sent campaign.",
          "operationId": "getReportsId",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.list-sent-campaigns.outputs.campaign_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "clicks": "$response.body#/timewarp/0/clicks",
            "opens": "$response.body#/timewarp/0/opens",
            "ecommerce": "$response.body#/ecommerce"
          }
        },
        {
          "stepId": "get-campaign-click-details",
          "description": "Retrieves information about clicks on specific links within the campaign.",
          "operationId": "getReportsIdClickDetails",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "count",
              "in": "query",
              "value": "$inputs.count"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.list-sent-campaigns.outputs.campaign_id"
            },
            {
              "name": "sort_field",
              "in": "query",
              "value": "$inputs.sort_field"
            },
            {
              "name": "sort_dir",
              "in": "query",
              "value": "$inputs.sort_dir"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "urls_clicked": "$response.body#/urls_clicked"
          }
        },
        {
          "stepId": "get-campaign-open-locations",
          "description": "Gets geographical open statistics for the campaign, showing where recipients opened the email.",
          "operationId": "getReportsIdLocations",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "campaign_id",
              "in": "path",
              "value": "$steps.list-sent-campaigns.outputs.campaign_id"
            },
            {
              "name": "count",
              "in": "query",
              "value": "$inputs.count"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "locations": "$response.body#/locations"
          }
        }
      ],
      "outputs": {
        "campaign_id": "$steps.list-sent-campaigns.outputs.campaign_id",
        "clicks": "$steps.get-campaign-report-details.outputs.clicks",
        "opens": "$steps.get-campaign-report-details.outputs.opens",
        "ecommerce": "$steps.get-campaign-report-details.outputs.ecommerce",
        "urls_clicked": "$steps.get-campaign-click-details.outputs.urls_clicked",
        "locations": "$steps.get-campaign-open-locations.outputs.locations"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "manage-account-data-exports",
      "summary": "Initiate a full export of your Mailchimp account data and then retrieve the download URL once the export is complete. This workflow is valuable for data backup, migration, or external analysis.",
      "description": "Initiate a full export of your Mailchimp account data and then retrieve the download URL once the export is complete. This workflow is valuable for data backup, migration, or external analysis.",
      "inputs": {
        "type": "object",
        "properties": {
          "include_stages": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "export_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "initiate-account-export",
          "description": "Creates a new account export request for specified data stages.",
          "operationId": "postAccountExport",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "include_stages": "$inputs.include_stages"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "export_id": "$response.body#/export_id",
            "download_url": "$response.body#/download_url"
          }
        },
        {
          "stepId": "get-export-status",
          "description": "Retrieves the status of a specific account export, including the download URL if finished.",
          "operationId": "getAccountExportId",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "export_id",
              "in": "path",
              "value": "$steps.initiate-account-export.outputs.export_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "download_url": "$response.body#/download_url",
            "finished": "$response.body#/finished"
          }
        }
      ],
      "outputs": {
        "export_id": "$steps.initiate-account-export.outputs.export_id",
        "download_url": "$steps.get-export-status.outputs.download_url",
        "finished": "$steps.get-export-status.outputs.finished"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "audience-creation-and-setup",
      "summary": "Sets up a new audience (list) in Mailchimp, including defining its contact information, campaign defaults, and interest categories for segmentation.",
      "description": "Sets up a new audience (list) in Mailchimp, including defining its contact information, campaign defaults, and interest categories for segmentation.",
      "inputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "permission_reminder": {
            "type": "string"
          },
          "email_type_option": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "campaign_defaults": {
            "type": "string"
          },
          "list_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "interest_category_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "add-new-audience",
          "description": "Creates a new audience (list) with required contact and campaign default settings.",
          "operationId": "postLists",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "permission_reminder": "$inputs.permission_reminder",
              "email_type_option": "$inputs.email_type_option",
              "contact": "$inputs.contact",
              "campaign_defaults": "$inputs.campaign_defaults"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-interest-category",
          "description": "Adds a new interest category to the newly created audience for grouping subscribers.",
          "operationId": "postListsIdInterestCategories",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.add-new-audience.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "list_id": "$steps.add-new-audience.outputs.id",
              "title": "$inputs.title",
              "type": "$inputs.type"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-interest-in-category",
          "description": "Creates a new interest (group name) within a specific interest category.",
          "operationId": "postListsIdInterestCategoriesIdInterests",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.add-new-audience.outputs.id"
            },
            {
              "name": "interest_category_id",
              "in": "path",
              "value": "$steps.add-interest-category.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "list_id": "$steps.add-new-audience.outputs.id",
              "interest_category_id": "$steps.add-interest-category.outputs.id",
              "name": "$inputs.name"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        }
      ],
      "outputs": {
        "id": "$steps.add-interest-in-category.outputs.id"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "execute-and-monitor-batch-operations",
      "summary": "Allows users to submit multiple API operations in a single request and then monitor the status of the batch processing.",
      "description": "Allows users to submit multiple API operations in a single request and then monitor the status of the batch processing.",
      "inputs": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "batch_id": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "start-batch-operation",
          "description": "Submits a batch of API operations for asynchronous processing.",
          "operationId": "postBatches",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "operations": "$inputs.operations"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "get-batch-status",
          "description": "Retrieves the current status and results URL of a specific batch operation.",
          "operationId": "getBatchesId",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "batch_id",
              "in": "path",
              "value": "$steps.start-batch-operation.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "status": "$response.body#/status",
            "response_body_url": "$response.body#/response_body_url"
          }
        }
      ],
      "outputs": {
        "id": "$steps.start-batch-operation.outputs.id",
        "status": "$steps.get-batch-status.outputs.status",
        "response_body_url": "$steps.get-batch-status.outputs.response_body_url"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "survey-lifecycle-and-response-analysis",
      "summary": "Manages the full lifecycle of a survey, from publishing and creating an associated email campaign to analyzing overall and detailed responses.",
      "description": "Manages the full lifecycle of a survey, from publishing and creating an associated email campaign to analyzing overall and detailed responses.",
      "inputs": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string"
          },
          "exclude_fields": {
            "type": "string"
          },
          "count": {
            "type": "string"
          },
          "offset": {
            "type": "string"
          },
          "before_date_created": {
            "type": "string"
          },
          "since_date_created": {
            "type": "string"
          },
          "before_campaign_last_sent": {
            "type": "string"
          },
          "since_campaign_last_sent": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "sort_field": {
            "type": "string"
          },
          "sort_dir": {
            "type": "string"
          },
          "has_ecommerce_store": {
            "type": "string"
          },
          "include_total_contacts": {
            "type": "string"
          },
          "list_id": {
            "type": "string"
          },
          "survey_id": {
            "type": "string"
          },
          "question_id": {
            "type": "string"
          },
          "respondent_familiarity_is": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "get-list-id-for-survey",
          "description": "Retrieves the ID of a list to associate with the survey.",
          "operationId": "getLists",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "count",
              "in": "query",
              "value": "$inputs.count"
            },
            {
              "name": "offset",
              "in": "query",
              "value": "$inputs.offset"
            },
            {
              "name": "before_date_created",
              "in": "query",
              "value": "$inputs.before_date_created"
            },
            {
              "name": "since_date_created",
              "in": "query",
              "value": "$inputs.since_date_created"
            },
            {
              "name": "before_campaign_last_sent",
              "in": "query",
              "value": "$inputs.before_campaign_last_sent"
            },
            {
              "name": "since_campaign_last_sent",
              "in": "query",
              "value": "$inputs.since_campaign_last_sent"
            },
            {
              "name": "email",
              "in": "query",
              "value": "$inputs.email"
            },
            {
              "name": "sort_field",
              "in": "query",
              "value": "$inputs.sort_field"
            },
            {
              "name": "sort_dir",
              "in": "query",
              "value": "$inputs.sort_dir"
            },
            {
              "name": "has_ecommerce_store",
              "in": "query",
              "value": "$inputs.has_ecommerce_store"
            },
            {
              "name": "include_total_contacts",
              "in": "query",
              "value": "$inputs.include_total_contacts"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "list_id": "$response.body#/lists/0/id"
          }
        },
        {
          "stepId": "get-survey-id",
          "description": "Retrieves the ID of an existing survey from a list.",
          "operationId": "getListsIdSurveys",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-list-id-for-survey.outputs.list_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "survey_id": "$response.body#/survey_id"
          }
        },
        {
          "stepId": "publish-survey",
          "description": "Publishes a draft or unpublished survey to make it live.",
          "operationId": "postListsIdSurveysIdActionsPublish",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-list-id-for-survey.outputs.list_id"
            },
            {
              "name": "survey_id",
              "in": "path",
              "value": "$steps.get-survey-id.outputs.survey_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "survey_data": "$response.body"
          }
        },
        {
          "stepId": "create-survey-campaign",
          "description": "Generates an email campaign that links directly to the published survey.",
          "operationId": "postListsIdSurveysIdActionsCreateEmail",
          "parameters": [
            {
              "name": "list_id",
              "in": "path",
              "value": "$steps.get-list-id-for-survey.outputs.list_id"
            },
            {
              "name": "survey_id",
              "in": "path",
              "value": "$steps.get-survey-id.outputs.survey_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "campaign_id": "$response.body#/variate_settings/combinations/0/id"
          }
        },
        {
          "stepId": "get-survey-report",
          "description": "Retrieves the overall report and statistics for the survey.",
          "operationId": "getReportingSurveysId",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "survey_id",
              "in": "path",
              "value": "$steps.get-survey-id.outputs.survey_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "total_responses": "$response.body#/total_responses"
          }
        },
        {
          "stepId": "get-survey-question-reports",
          "description": "Gets individual reports for each question within the survey, including response counts.",
          "operationId": "getReportingSurveysIdQuestions",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "survey_id",
              "in": "path",
              "value": "$steps.get-survey-id.outputs.survey_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "questions": "$response.body#/questions"
          }
        },
        {
          "stepId": "get-survey-question-answers",
          "description": "Retrieves detailed answers for a specific survey question.",
          "operationId": "getReportingSurveysIdQuestionsIdAnswers",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "value": "$inputs.fields"
            },
            {
              "name": "exclude_fields",
              "in": "query",
              "value": "$inputs.exclude_fields"
            },
            {
              "name": "survey_id",
              "in": "path",
              "value": "$steps.get-survey-id.outputs.survey_id"
            },
            {
              "name": "question_id",
              "in": "path",
              "value": "$steps.get-survey-question-reports.outputs.questions.id"
            },
            {
              "name": "respondent_familiarity_is",
              "in": "query",
              "value": "$inputs.respondent_familiarity_is"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "answers": "$response.body#/answers"
          }
        }
      ],
      "outputs": {
        "list_id": "$steps.get-list-id-for-survey.outputs.list_id",
        "survey_id": "$steps.get-survey-id.outputs.survey_id",
        "survey_data": "$steps.publish-survey.outputs.survey_data",
        "campaign_id": "$steps.create-survey-campaign.outputs.campaign_id",
        "total_responses": "$steps.get-survey-report.outputs.total_responses",
        "questions": "$steps.get-survey-question-reports.outputs.questions",
        "answers": "$steps.get-survey-question-answers.outputs.answers"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
