{
  "arazzo": "1.0.1",
  "info": {
    "title": "Jentic Generated Arazzo Specification",
    "version": "1.0.0",
    "description": "Automatically generated Arazzo specification from OpenAPI"
  },
  "sourceDescriptions": [
    {
      "name": "openapi_source",
      "url": "./apis/openapi/openai.com/main/2.3.0/openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "convert-text-file-to-speech",
      "summary": "Uploads a text file, retrieves its content, and then converts that text content into synthesized speech audio using a specified voice and model.",
      "description": "Uploads a text file, retrieves its content, and then converts that text content into synthesized speech audio using a specified voice and model.",
      "inputs": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "file_id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "voice": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-text-file",
          "description": "Upload the text file to be converted. Purpose can be 'assistants' or 'user_data'.",
          "operationId": "createFile",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "file": "$inputs.file",
              "purpose": "$inputs.purpose"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "bytes": "$response.body#/bytes",
            "created_at": "$response.body#/created_at",
            "filename": "$response.body#/filename",
            "object": "$response.body#/object",
            "purpose": "$response.body#/purpose",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "get-file-content",
          "description": "Retrieve the text content of the uploaded file.",
          "operationId": "downloadFile",
          "parameters": [
            {
              "name": "file_id",
              "in": "path",
              "value": "$steps.upload-text-file.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "file_content": "$response.body#/file_content"
          }
        },
        {
          "stepId": "generate-speech",
          "description": "Generate audio from the retrieved text content.",
          "operationId": "createSpeech",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "input": "$steps.get-file-content.outputs.file_content",
              "model": "$inputs.model",
              "voice": "$inputs.voice"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "audio_content": "$response.body#/audio_content"
          }
        }
      ],
      "outputs": {
        "id": "$steps.upload-text-file.outputs.id",
        "bytes": "$steps.upload-text-file.outputs.bytes",
        "created_at": "$steps.upload-text-file.outputs.created_at",
        "filename": "$steps.upload-text-file.outputs.filename",
        "object": "$steps.upload-text-file.outputs.object",
        "purpose": "$steps.upload-text-file.outputs.purpose",
        "status": "$steps.upload-text-file.outputs.status",
        "file_content": "$steps.get-file-content.outputs.file_content",
        "audio_content": "$steps.generate-speech.outputs.audio_content"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    },
    {
      "workflowId": "run-assistant-with-file-search-on-uploaded-files",
      "summary": "Uploads files, creates a vector store, adds files to it, creates an assistant configured for file search using the vector store, creates a thread, adds a user message, runs the assistant on the thread, and retrieves the assistant's response which utilizes the uploaded files.",
      "description": "Uploads files, creates a vector store, adds files to it, creates an assistant configured for file search using the vector store, creates a thread, adds a user message, runs the assistant on the thread, and retrieves the assistant's response which utilizes the uploaded files.",
      "inputs": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expires_after": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "vector_store_id": {
            "type": "string"
          },
          "file_ids": {
            "type": "string"
          },
          "batch_id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "messages": {
            "type": "string"
          },
          "tool_resources": {
            "type": "string"
          },
          "thread_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "include[]": {
            "type": "string"
          },
          "run_id": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "order": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "before": {
            "type": "string"
          }
        }
      },
      "steps": [
        {
          "stepId": "upload-knowledge-file-1",
          "description": "Upload the first knowledge file for the assistant.",
          "operationId": "createFile",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "file": "$inputs.file",
              "purpose": "$inputs.purpose"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "upload-knowledge-file-2",
          "description": "Upload the second knowledge file for the assistant.",
          "operationId": "createFile",
          "requestBody": {
            "contentType": "multipart/form-data",
            "payload": {
              "file": "$inputs.file",
              "purpose": "$inputs.purpose"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-vector-store",
          "description": "Create a new vector store to hold the file knowledge.",
          "operationId": "createVectorStore",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "name": "$inputs.name",
              "expires_after": "$inputs.expires_after",
              "metadata": "$inputs.metadata"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "add-files-to-vector-store",
          "description": "Add the uploaded files to the vector store in a batch.",
          "operationId": "createVectorStoreFileBatch",
          "parameters": [
            {
              "name": "vector_store_id",
              "in": "path",
              "value": "$steps.create-vector-store.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "vector_store_id": "$steps.create-vector-store.outputs.id",
              "file_ids": "$inputs.file_ids"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status",
            "file_counts": "$response.body#/file_counts"
          }
        },
        {
          "stepId": "check-vector-store-file-processing",
          "description": "Check the status of the file batch processing. Poll until status is 'completed'.",
          "operationId": "getVectorStoreFileBatch",
          "parameters": [
            {
              "name": "vector_store_id",
              "in": "path",
              "value": "$steps.create-vector-store.outputs.id"
            },
            {
              "name": "batch_id",
              "in": "path",
              "value": "$steps.add-files-to-vector-store.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status",
            "file_counts": "$response.body#/file_counts"
          }
        },
        {
          "stepId": "create-file-search-assistant",
          "description": "Create an assistant configured with the file search tool pointing to the vector store.",
          "operationId": "createAssistant",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "model": "$inputs.model"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "create-conversation-thread",
          "description": "Create a new conversation thread.",
          "operationId": "createThread",
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "messages": "$inputs.messages",
              "tool_resources": "$inputs.tool_resources",
              "metadata": "$inputs.metadata"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id"
          }
        },
        {
          "stepId": "add-user-query",
          "description": "Add the user's query to the conversation thread.",
          "operationId": "createMessage",
          "parameters": [
            {
              "name": "thread_id",
              "in": "path",
              "value": "$steps.create-conversation-thread.outputs.id"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "thread_id": "$steps.create-conversation-thread.outputs.id",
              "role": "$inputs.role",
              "content": "$inputs.content"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "role": "$response.body#/role",
            "content": "$response.body#/content"
          }
        },
        {
          "stepId": "run-assistant-on-thread",
          "description": "Run the file search assistant on the thread.",
          "operationId": "createRun",
          "parameters": [
            {
              "name": "thread_id",
              "in": "path",
              "value": "$steps.create-conversation-thread.outputs.id"
            },
            {
              "name": "include[]",
              "in": "query",
              "value": "$inputs.include[]"
            }
          ],
          "requestBody": {
            "contentType": "application/json",
            "payload": {
              "thread_id": "$steps.create-conversation-thread.outputs.id",
              "assistant_id": "$steps.create-file-search-assistant.outputs.id"
            }
          },
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status"
          }
        },
        {
          "stepId": "check-run-status",
          "description": "Check the status of the assistant run. Poll until status is 'completed'.",
          "operationId": "getRun",
          "parameters": [
            {
              "name": "thread_id",
              "in": "path",
              "value": "$steps.create-conversation-thread.outputs.id"
            },
            {
              "name": "run_id",
              "in": "path",
              "value": "$steps.run-assistant-on-thread.outputs.id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "id": "$response.body#/id",
            "status": "$response.body#/status",
            "usage": "$response.body#/usage"
          }
        },
        {
          "stepId": "retrieve-assistant-response",
          "description": "Retrieve the messages from the thread, including the assistant's response.",
          "operationId": "listMessages",
          "parameters": [
            {
              "name": "thread_id",
              "in": "path",
              "value": "$steps.create-conversation-thread.outputs.id"
            },
            {
              "name": "limit",
              "in": "query",
              "value": "$inputs.limit"
            },
            {
              "name": "order",
              "in": "query",
              "value": "$inputs.order"
            },
            {
              "name": "after",
              "in": "query",
              "value": "$inputs.after"
            },
            {
              "name": "before",
              "in": "query",
              "value": "$inputs.before"
            },
            {
              "name": "run_id",
              "in": "query",
              "value": "$inputs.run_id"
            }
          ],
          "successCriteria": [
            {
              "condition": "$statusCode == 200"
            }
          ],
          "outputs": {
            "data": "$response.body#/data",
            "first_id": "$response.body#/first_id",
            "last_id": "$response.body#/last_id",
            "has_more": "$response.body#/has_more"
          }
        }
      ],
      "outputs": {
        "id": "$steps.check-run-status.outputs.id",
        "status": "$steps.check-run-status.outputs.status",
        "file_counts": "$steps.check-vector-store-file-processing.outputs.file_counts",
        "role": "$steps.add-user-query.outputs.role",
        "content": "$steps.add-user-query.outputs.content",
        "usage": "$steps.check-run-status.outputs.usage",
        "data": "$steps.retrieve-assistant-response.outputs.data",
        "first_id": "$steps.retrieve-assistant-response.outputs.first_id",
        "last_id": "$steps.retrieve-assistant-response.outputs.last_id",
        "has_more": "$steps.retrieve-assistant-response.outputs.has_more"
      },
      "failureActions": [
        {
          "reference": "$components.failureActions.auth_failure"
        },
        {
          "reference": "$components.failureActions.permission_denied"
        },
        {
          "reference": "$components.failureActions.not_found"
        },
        {
          "reference": "$components.failureActions.server_error"
        }
      ]
    }
  ],
  "components": {
    "successActions": {
      "default_success": {
        "name": "default_success",
        "type": "end"
      }
    },
    "failureActions": {
      "auth_failure": {
        "name": "auth_failure",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 401"
          }
        ]
      },
      "permission_denied": {
        "name": "permission_denied",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 403"
          }
        ]
      },
      "not_found": {
        "name": "not_found",
        "type": "end",
        "criteria": [
          {
            "condition": "$statusCode == 404"
          }
        ]
      },
      "server_error": {
        "name": "server_error",
        "type": "retry",
        "retryAfter": 2,
        "retryLimit": 3,
        "criteria": [
          {
            "condition": "$statusCode >= 500"
          }
        ]
      },
      "default_retry": {
        "name": "default_retry",
        "type": "retry",
        "retryAfter": 1,
        "retryLimit": 3
      },
      "default_failure": {
        "name": "default_failure",
        "type": "end"
      }
    }
  }
}
